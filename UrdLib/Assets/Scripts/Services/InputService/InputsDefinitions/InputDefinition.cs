//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UrdLib/UrdLib/Assets/Scripts/Services/InputService/InputsDefinitions/InputDefinition.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Urd.Inputs
{
    public partial class @InputDefinition: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputDefinition()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputDefinition"",
    ""maps"": [
        {
            ""name"": ""Screen"",
            ""id"": ""6572a774-e8b9-45e5-a680-31a9e4f47a11"",
            ""actions"": [
                {
                    ""name"": ""TestActionA"",
                    ""type"": ""Button"",
                    ""id"": ""126ff951-9f66-419a-93c7-638b8909f173"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53c247f1-ebb1-4a5e-9daf-a6454107a827"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestActionA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Screen
            m_Screen = asset.FindActionMap("Screen", throwIfNotFound: true);
            m_Screen_TestActionA = m_Screen.FindAction("TestActionA", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Screen
        private readonly InputActionMap m_Screen;
        private List<IScreenActions> m_ScreenActionsCallbackInterfaces = new List<IScreenActions>();
        private readonly InputAction m_Screen_TestActionA;
        public struct ScreenActions
        {
            private @InputDefinition m_Wrapper;
            public ScreenActions(@InputDefinition wrapper) { m_Wrapper = wrapper; }
            public InputAction @TestActionA => m_Wrapper.m_Screen_TestActionA;
            public InputActionMap Get() { return m_Wrapper.m_Screen; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ScreenActions set) { return set.Get(); }
            public void AddCallbacks(IScreenActions instance)
            {
                if (instance == null || m_Wrapper.m_ScreenActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ScreenActionsCallbackInterfaces.Add(instance);
                @TestActionA.started += instance.OnTestActionA;
                @TestActionA.performed += instance.OnTestActionA;
                @TestActionA.canceled += instance.OnTestActionA;
            }

            private void UnregisterCallbacks(IScreenActions instance)
            {
                @TestActionA.started -= instance.OnTestActionA;
                @TestActionA.performed -= instance.OnTestActionA;
                @TestActionA.canceled -= instance.OnTestActionA;
            }

            public void RemoveCallbacks(IScreenActions instance)
            {
                if (m_Wrapper.m_ScreenActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IScreenActions instance)
            {
                foreach (var item in m_Wrapper.m_ScreenActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ScreenActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ScreenActions @Screen => new ScreenActions(this);
        public interface IScreenActions
        {
            void OnTestActionA(InputAction.CallbackContext context);
        }
    }
}
